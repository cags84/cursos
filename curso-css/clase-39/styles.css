/* 
Flexbox
    Alineamiento
    Estas propiedades para alinear se aplican SIEMPRE al flex-container
    Existen propiedades para el main-axis y para el cross-axis
    main-axis:
        justify-content: flex-start(default) | center | space-between | space-around | space-evenly | flex-end
        flex-start alinea los elementos al principio del main axis
        center centra los elementos en la mitad del main axis
        flex-end alinea los elementos al final del main axis
        space-between distribuye los items a la misma distancia y no deja espacio exterior ni el primer ni el último flex-end.
        
        space-around distribuye los items a la misma distancia y deja un espacio exterior en el primero y en el último flex-item
        space-evenly distribuye los items y los espacios exteriores del primer y último flex-item dejando la misma distancia entre todos.
    cross-axis
        align-items: Una sola línea.
            flex-start | center | flex-end | stretch(default) | baseline
        align-content:varias líneas
            flex-start | center | flex-end | stretch(default) | baseline
        align-self: Se aplica al flex-item. Sirve para alinear un elemento en concreto en el cross-axis
    TRUCO EXTRA: Al utilizar auto con la propiedad margin lo que sucede es que el elemento se va al lado contrario del margen que dimos, si ponemos margin:auto el elemento se centra completamente, tanto vertical como horizontalmente
*/

@charset 'UTF-8';
@import 'normalize-8.0.1.css';

*,
*:after,
*:before {
    box-sizing: border-box;
}

/* Fix [img] */
img {max-width: 100%}

/* --------------------------------------------------- */

/* Alinear contenido en flexbox */

.flex-container {
    background-color: #FCA17D;
    height: 400px;
    display: flex;
    margin-bottom: 1em;
}

.flex-item {
    width: 50px;
    height: 50px;
    margin: 0.5em;
    line-height: 50px;
    text-align: center;
    color: white;
    background-color: #9A348E;
}

/* main axis, tenemos a justify-content, justifica el contenido en el eje principal (main axis) */

.flex-container {
    justify-content: center;
    justify-content: end;
    justify-content: space-around;
    justify-content: stretch;
    justify-content: right;
    justify-content: left;
    justify-content: baseline;
    justify-content: space-between;  /* distribuir los elemento a la misma distancia. */
    justify-content: space-evenly; /* distribuir los elementos a la misma distancia en todos los lados*/
    justify-content: flex-start; /* Valor por defecto. */
}

/* cross axis, tenemos a align-items para una sola línea, y align-content para varias líneas, además align-self, que se le aplica a flex-item, sirve para alienar en concreto en el cross axis. */

.flex-container {
    align-items: center;
    align-items: flex-end;
    align-items: flex-start;
    align-items: stretch; /* Valor por defecto. */
}

/* Ejercicio 2 */

.flex-container {
    height: 400px;
    flex-wrap: wrap;
    align-content: flex-start; /* funciona con varias lineas */
    align-content: space-between;
    align-content: space-around;
}

/* EJEMPLO 3 */

.box {
    border: 1px solid black;
    width: 100%;
    height: 400px;
    display: flex;
}

.box img {
    max-width: 50%;
}

/* EJEMPLO 4 */

.prices {
    display: flex;
    height: 600px;
    align-items: baseline;
}

.prices__item {
    width: 25%;
    height: 300px;
}

.prices__item:first-child {
    background-color: peru;
}

.prices__item:nth-child(2) {
    background-color: green;
    line-height: 20px;
    align-self: center; /* Con esto alineamos solo el flex-item en concreto. */
}

.prices__item:nth-child(3) {
    background-color: indianred;
    line-height: 15px;
}

.prices__item:nth-child(4) {
    background-color: lightgreen;
    line-height: 50px;
}

/* MARGENES */
/* No funciona igual a como estamos acostumbrado, el margin-left: auto, el elemento se coloca en la parte superior derecha, absorve todo el margen. */
